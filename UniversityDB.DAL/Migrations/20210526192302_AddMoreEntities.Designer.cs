// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UniversityDB.DAL.Contexts;
using UniversityDB.DAL.Entities;

namespace UniversityDB.DAL.Migrations
{
    [DbContext(typeof(DatabaseManagerContext))]
    [Migration("20210526192302_AddMoreEntities")]
    partial class AddMoreEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("UniversityDB.DAL.Entities.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<int>>("Cafedras")
                        .HasColumnType("jsonb")
                        .HasColumnName("Cafedras");

                    b.Property<int>("ControlForm")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<List<int>>("Semestres")
                        .HasColumnType("jsonb")
                        .HasColumnName("Semestres");

                    b.Property<Dictionary<LessonType, int>>("TimeInHours")
                        .HasColumnType("jsonb")
                        .HasColumnName("TimeInHours");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<string>>("Cafedras")
                        .HasColumnType("jsonb")
                        .HasColumnName("Cafedras");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GroupCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.ScheduleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DisciplineId")
                        .HasColumnType("integer");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<int>("LessonType")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Cafedra")
                        .HasColumnType("text");

                    b.Property<DateTime>("EnrolmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<bool>("HasChildren")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<decimal>("ScholarshipAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("Semestr")
                        .HasColumnType("integer");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.TeachersRanks.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Cafedra")
                        .HasColumnType("text");

                    b.Property<string>("CandidatoryTheme")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("HasChildren")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStudyingInAspiranture")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<decimal>("SalarypAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.TeachersRanks.Assistant", b =>
                {
                    b.HasBaseType("UniversityDB.DAL.Entities.TeachersRanks.Teacher");

                    b.ToTable("Assistants");
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.TeachersRanks.SeniorTeacher", b =>
                {
                    b.HasBaseType("UniversityDB.DAL.Entities.TeachersRanks.Assistant");

                    b.Property<string>("HeadedScienceTheme")
                        .HasColumnType("text");

                    b.ToTable("SeniorTeachers");
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.TeachersRanks.Docent", b =>
                {
                    b.HasBaseType("UniversityDB.DAL.Entities.TeachersRanks.SeniorTeacher");

                    b.Property<string>("DoctoryTheme")
                        .HasColumnType("text");

                    b.ToTable("Docents");
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.TeachersRanks.Proffesor", b =>
                {
                    b.HasBaseType("UniversityDB.DAL.Entities.TeachersRanks.Docent");

                    b.Property<string>("HeadedScienceStream")
                        .HasColumnType("text");

                    b.ToTable("Proffesors");
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.TeachersRanks.Assistant", b =>
                {
                    b.HasOne("UniversityDB.DAL.Entities.TeachersRanks.Teacher", null)
                        .WithOne()
                        .HasForeignKey("UniversityDB.DAL.Entities.TeachersRanks.Assistant", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.TeachersRanks.SeniorTeacher", b =>
                {
                    b.HasOne("UniversityDB.DAL.Entities.TeachersRanks.Assistant", null)
                        .WithOne()
                        .HasForeignKey("UniversityDB.DAL.Entities.TeachersRanks.SeniorTeacher", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.TeachersRanks.Docent", b =>
                {
                    b.HasOne("UniversityDB.DAL.Entities.TeachersRanks.SeniorTeacher", null)
                        .WithOne()
                        .HasForeignKey("UniversityDB.DAL.Entities.TeachersRanks.Docent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityDB.DAL.Entities.TeachersRanks.Proffesor", b =>
                {
                    b.HasOne("UniversityDB.DAL.Entities.TeachersRanks.Docent", null)
                        .WithOne()
                        .HasForeignKey("UniversityDB.DAL.Entities.TeachersRanks.Proffesor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
